# Github Repository Actions 페이지에 나타낼 이름
name: Deploy creame-api

# event trigger
on:
  workflow_dispatch:
  # push:
  #  branches:
  #    - develop

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: creame-githubaction-bucket
  CD_APP_NAME: creame-codedeploy-app
  CD_GROUP_NAME: creame-dev-deployment-group

permissions:
  contents: read

# jobs의 속성 아래 hash table 형태로 작업내용을 정의 (hash table의 키 값은 적절한 key 값으로 설정)
jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest

    steps:
    # checkout
    - name: checkout
      uses: actions/checkout@v3

    # JDK setting
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'gradle'

#    - name: Grant execute permission for gradlew
#      run: chmod +x gradlew
#      shell: bash
#
#    # Caching dependencies
#    - uses: actions/cache@v3
#      with:
#        path: |
#          ~/.gradle/caches
#          ~/.gradle/wrapper
#        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#        restore-keys: |
#          ${{ runner.os }}-gradle-

    # gradle build (test 제외)
    - name: Build with Gradle
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        arguments: clean build -x test

      # gradle build (test 포함)
      #    - name: Test with Gradle # test application build
      #      run: ./gradlew test

      # AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # build 후 S3 upload
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CD_APP_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

    # S3 upload 후 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CD_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CD_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip